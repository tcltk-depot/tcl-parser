'\"
'\" Generated from file '' by tcllib/doctools with format 'nroff'
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.1 2009/01/30 04:56:47 andreas_kupries Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "parse" n 1.4  "Parse a Tcl script into commands, words, and tokens"
.BS
.SH NAME
parse \- Parse a Tcl script into commands, words, and tokens.
.SH SYNOPSIS
package require \fBTcl  8\fR
.sp
package require \fBparser  ?1.4?\fR
.sp
\fBparse\fR command \fIscript\fR [arg first] [arg length]
.sp
\fBparse\fR expr \fIscript\fR [arg first] [arg length]
.sp
\fBparse\fR varname \fIscript\fR [arg first] [arg length]
.sp
\fBparse\fR list \fIscript\fR [arg first] [arg length]
.sp
\fBparse\fR getrange \fIstring\fR ?index length?
.sp
\fBparse\fR getstring \fIstring\fR [arg first] [arg length]
.sp
\fBparse\fR charindex \fIstring\fR [arg first] [arg length]
.sp
\fBparse\fR charlength \fIstring\fR [arg first] [arg length]
.sp
.BE
.SH DESCRIPTION
.PP
This command parses a Tcl script into \fIcommands, words\fR and \fItokens\fR.
Each of the commands below takes a \fIscript\fR to parse and a range
into the script: {\fIfirst\fR \fIlength\fR}.  The command parses the script from
the first index for \fIlength\fR characters.   For convenience \fIlength\fR
can be set to the value "end".  The return of
each command is a list of tuples indicating the ranges of each
sub-element.  Use the returned indices as arguments to \fBparse getstring\fR to
extract the parsed string from the script.
.PP
The \fBparse\fR command breaks up the script into sequentially smaller
elements.  A \fIscript\fR contains one or more \fIcommands\fR.  A \fIcommand\fR is a set
of \fIwords\fR that is terminated by a semicolon, newline or end the of the
script and has no unclosed quotes, braces, brackets or array element
names.  A \fIword\fR is a set of characters grouped together by whitespace,
quotes, braces or brackets.  Each word is composed of one or more
\fItokens\fR.  A \fItoken\fR is one of the following types: \fItext\fR, \fIvariable\fR,
\fIbackslash\fR, \fIcommand\fR, \fIexpr\fR, \fIoperator\fR, or \fIexpand\fR.
The type of token specifies how to decompose the string further.  For example, a \fItext\fR
token is a literal set of characters that does not need to be broken
into smaller pieces.  However, the \fIvariable\fR token needs to be broken
into smaller pieces to separate the name of the variable from an array
indices, if one is supplied.
.PP
The \fIfirst\fR index is treated the same way as the indices in
the Tcl \fBstring\fR command.  An index of 0 refers to the first character
of the string.  An index of end (or any abbreviation of it) refers to
the last character of the string.  If first is less than zero then it
is treated as if it were zero, and if first + length is greater than or equal to
the length of the string then it is treated as if it were end.
.TP
\fBparse\fR command \fIscript\fR [arg first] [arg length]
Returns a list of indices that partitions the script into \fIcommands\fR.
This routine returns a list of the following form: \fIcommentRange\fR
\fIcommandRange\fR \fIrestRange\fR \fIparseTree\fR. The first range refers to any
leading comments before the command.  The second range refers to the
command itself.  The third range contains the remainder of the
original range that appears after the command range.  The \fIparseTree\fR is
a list representation of the parse tree where each node is a list in
the form: \fItype\fR \fIrange\fR \fIsubTree\fR.
.TP
\fBparse\fR expr \fIscript\fR [arg first] [arg length]
Returns a list that partitions an \fIexpression\fR into
subexpressions.  The first element of the list is the token type,
\fIsubexpr\fR, followed by the range of the expressions text, and
finally by a \fIsubTree\fR with the words and types of the parse
tree.
.TP
\fBparse\fR varname \fIscript\fR [arg first] [arg length]
Returns a list that partitions a \fIvariable\fR token into words.
The first element of the list is the token type, \fIvariable\fR.  The
second is the range of the variable's text, and the third is a subTree
that lists the words and ranges of the variable's components.
.TP
\fBparse\fR list \fIscript\fR [arg first] [arg length]
Parses a script as a \fIlist\fR, returning the range of each element.
\fIscript\fR must be a valid list, or an error will be generated.
.TP
\fBparse\fR getrange \fIstring\fR ?index length?
Gets the range in bytes of \fIstring\fR, optionally beginning at ?index?
of length ?length? (both in characters).  Equivalent to \fBstring bytelength\fR.
.TP
\fBparse\fR getstring \fIstring\fR [arg first] [arg length]
Get the section of \fIstring\fR that corresponds to the specified
range (in bytes).  Note that this command must be used instead of \fBstring range\fR
with values returned from the parse commands, because the values are
in bytes, and \fBstring range\fR instead uses characters as its units.
.TP
\fBparse\fR charindex \fIstring\fR [arg first] [arg length]
Converts byte oriented index values into character oriented index
values, for the string in question.
.TP
\fBparse\fR charlength \fIstring\fR [arg first] [arg length]
Converts the given byte length into a character count, for the string in question.
.PP
.SH EXAMPLES
.CS
set script {
while true {puts [getupdate]}
}
parse command $script {0 end}
.CE
Returns:
.PP
{0 0} {5 30} {35 0} {{simple {5 5} {{text {5 5} {}}}} {simple {11 4} {{text {11 4} {}}}} {simple {16 18} {{text {17 16} {}}}}}
.PP
Or in other words, a string with no comments, 30 bytes long, beginning
at byte 5.  It is composed of a series of subwords, which include
while, true, and {puts [getupdate]}.
.SH KEYWORDS
parse, parser